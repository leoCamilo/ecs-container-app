Resources:
  # Load balancers for getting traffic to containers.
  # This sample template creates one load balancer:

  # - One public load balancer, hosted in public subnets that is accessible
  #   to the public, and is intended to route traffic to one or more public
  #   facing services.

  # A public facing load balancer, this is used for accepting traffic from the public
  # internet and directing it to public facing microservices

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      SecurityGroups: [!Ref PublicLoadBalancerSG]
      Subnets:
        - ${self:custom.stageVars.network.subnet1}
        - ${self:custom.stageVars.network.subnet2}
        # The load balancer is placed into the public subnets, so that traffic
        # from the internet can reach the load balancer directly via the internet gateway

  # A dummy target group is used to setup the ALB to just drop traffic
  # initially, before any real service target groups have been added.
  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join ['-', [!Ref 'AWS::StackName', 'drop']]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: ${self:custom.stageVars.network.vpcId}

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref DummyTargetGroupPublic
          Type: 'forward'
      LoadBalancerArn: !Ref PublicLoadBalancer
      Protocol: HTTP
      Port: 80

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 6
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: ${self:custom.stageVars.ecs.exampleService.serviceName}
      Port: ${self:custom.stageVars.ecs.exampleService.port}
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: ${self:custom.stageVars.network.vpcId}

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: ['${self:custom.stageVars.ecs.exampleService.path}']
      ListenerArn: !Ref PublicLoadBalancerListener
      Priority: ${self:custom.stageVars.ecs.exampleService.priority}
